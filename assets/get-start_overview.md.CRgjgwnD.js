import{_ as e,c as a,o,V as s}from"./chunks/framework.DVGDG1kt.js";const f=JSON.parse('{"title":"Visión General","description":"","frontmatter":{},"headers":[],"relativePath":"get-start/overview.md","filePath":"get-start/overview.md"}'),i={name:"get-start/overview.md"},n=s('<h1 id="vision-general" tabindex="-1">Visión General <a class="header-anchor" href="#vision-general" aria-label="Permalink to &quot;Visión General&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La fuente original (en ingles) de este tutorial se encuentra <a href="https://tanstack.com/query/latest/docs/framework/vue/overview" target="_blank" rel="noreferrer">aquí</a></p></div><p>TanStack Query (FKA Vue Query) a menudo se describe como la biblioteca de recuperación de datos que falta para aplicaciones web, pero en términos más técnicos, facilita la <strong>búsqueda, el almacenamiento en caché, la sincronización y la actualización del estado del servidor</strong> en sus aplicaciones web.</p><h2 id="motivacion" tabindex="-1">Motivación <a class="header-anchor" href="#motivacion" aria-label="Permalink to &quot;Motivación&quot;">​</a></h2><p>La mayoría de los <em>frameworks</em> web centrales <em>no</em> vienen con una forma obstinada de obtener o actualizar datos de manera holística. Debido a esto, los desarrolladores terminan construyendo metamarcos que encapsulan opiniones estrictas sobre la obtención de datos o inventan sus propias formas de obtener datos. Por lo general, esto significa improvisar estados y efectos secundarios basados en componentes, o usar bibliotecas de administración de estado de propósito más general para almacenar y proporcionar datos asincrónicos en todas sus aplicaciones.</p><p>Si bien la mayoría de las bibliotecas de administración de estado tradicionales son excelentes para trabajar con el estado del cliente, <strong>no son tan buenas para trabajar con el estado asíncrono o del servidor</strong>. Esto se debe a que <strong>el estado del servidor es totalmente diferente</strong>. Para empezar, estado del servidor:</p><ul><li>Se mantiene de forma remota en una ubicación que usted no controla ni es de su propiedad.</li><li>Requiere API asincrónicas para recuperar y actualizar</li><li>Implica propiedad compartida y otras personas pueden cambiarlo sin su conocimiento.</li><li>Potencialmente, sus aplicaciones pueden quedar &quot;desactualizadas&quot; si no tiene cuidado</li></ul><p>Una vez que comprenda la naturaleza del estado del servidor en su aplicación, <strong>surgirán aún más desafíos</strong> a medida que avance, por ejemplo:</p><ul><li>Almacenamiento en caché... (posiblemente lo más difícil de hacer en programación)</li><li>Deduplicar múltiples solicitudes para los mismos datos en una sola solicitud</li><li>Actualización de datos &quot;obsoletos&quot; en segundo plano</li><li>Saber cuándo los datos están &quot;obsoletos&quot;</li><li>Reflejar las actualizaciones de los datos lo más rápido posible</li><li>Optimizaciones de rendimiento como paginación y carga diferida de datos</li><li>Gestión de la memoria y la recolección de basura del estado del servidor</li><li>Memorizar los resultados de la consulta con el uso compartido estructural</li></ul><p>Si esa lista no lo abruma, entonces eso debe significar que probablemente ya haya resuelto todos los problemas de estado de su servidor y merece un premio. Sin embargo, si eres como la gran mayoría de las personas, aún tienes que afrontar todos o la mayoría de estos desafíos y ¡solo estamos arañando la superficie!</p><p>Vue Query es sin duda una de las mejores bibliotecas para gestionar el estado del servidor. Funciona sorprendentemente bien <strong>desde el primer momento, sin configuración y puede personalizarse</strong> a su gusto a medida que su aplicación crece.</p><p>Vue Query le permite vencer y superar los difíciles desafíos y obstáculos del estado del servidor y controlar los datos de su aplicación antes de que comience a controlarlo a usted.</p><p>En una nota más técnica, Vue Query probablemente:</p><ul><li>Le ayuda a eliminar <strong>muchas</strong> líneas de código complicado e incomprendido de su aplicación y a reemplazarlo con solo un puñado de líneas de lógica de Vue Query.</li><li>Haga que su aplicación sea más fácil de mantener y más fácil de crear nuevas funciones sin preocuparse por conectar nuevas fuentes de datos del estado del servidor.</li><li>Tenga un impacto directo en sus usuarios finales haciendo que su aplicación se sienta más rápida y con mayor capacidad de respuesta que nunca.</li><li>Potencialmente le ayudará a ahorrar ancho de banda y aumentar el rendimiento de la memoria.</li></ul><h2 id="me-convenciste-¿y-ahora-que" tabindex="-1">Me Convenciste, ¿Y Ahora Qué? <a class="header-anchor" href="#me-convenciste-¿y-ahora-que" aria-label="Permalink to &quot;Me Convenciste, ¿Y Ahora Qué?&quot;">​</a></h2><p>Aprenda Vue Query a su propio ritmo con nuestra increíblemente completa <a href="./installation.html">Guía Paso a Paso</a> y <a href="https://tanstack.com/query/latest/docs/framework/vue/reference/useQuery" target="_blank" rel="noreferrer">Referencia de API</a></p>',16),r=[n];function t(l,c,d,u,m,p){return o(),a("div",null,r)}const v=e(i,[["render",t]]);export{f as __pageData,v as default};
