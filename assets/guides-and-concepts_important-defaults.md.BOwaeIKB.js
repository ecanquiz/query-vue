import{_ as e,c as a,o,V as t}from"./chunks/framework.DVGDG1kt.js";const g=JSON.parse('{"title":"Valores Por-Defecto Importantes","description":"","frontmatter":{},"headers":[],"relativePath":"guides-and-concepts/important-defaults.md","filePath":"guides-and-concepts/important-defaults.md"}'),s={name:"guides-and-concepts/important-defaults.md"},n=t('<h1 id="valores-por-defecto-importantes" tabindex="-1">Valores Por-Defecto Importantes <a class="header-anchor" href="#valores-por-defecto-importantes" aria-label="Permalink to &quot;Valores Por-Defecto Importantes&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La fuente original (en ingles) de este tutorial se encuentra <a href="https://tanstack.com/query/latest/docs/framework/vue/guides/important-defaults" target="_blank" rel="noreferrer">aquí</a></p></div><p>Fuera de la caja, TanStack Query está configurado con valores predeterminados <strong>agresivos pero sensatos. A veces, estos valores predeterminados pueden tomar desprevenidos a los nuevos usuarios o dificultar el aprendizaje/depuración si el usuario los desconoce</strong>. Téngalos en cuenta a medida que continúa aprendiendo y utilizando TanStack Query:</p><ul><li>Las instancias de consulta mediante <code>useQuery</code> o <code>useInfiniteQuery</code> <strong>consideran</strong> de forma predeterminada <strong>que los datos almacenados en caché están obsoletos</strong>.</li></ul><blockquote><p><em>&quot;Para cambiar este comportamiento, puede configurar sus consultas tanto globalmente como por consulta usando la opción <code>staleTime</code>. Especificar un <code>staleTime</code> más largo significa que las consultas no recuperarán sus datos con tanta frecuencia.&quot;</em></p></blockquote><ul><li><p>Las consultas obsoletas se recuperan automáticamente en segundo plano cuando:</p><ul><li>Nuevas instancias del montaje de consultas.</li><li>La ventana se reenfoca</li><li>La red se vuelve a conectar.</li><li>La consulta se configura opcionalmente con un intervalo de recuperación</li></ul></li></ul><blockquote><p><em>&quot;Para cambiar esta funcionalidad, puede utilizar opciones como <code>refetchOnMount</code>, <code>refetchOnWindowFocus</code>, <code>refetchOnReconnect</code> y <code>refetchInterval</code>.&quot;</em></p></blockquote><ul><li><p>Los resultados de las consultas que no tienen más instancias activas de <code>useQuery</code>, <code>useInfiniteQuery</code> u observadores de consultas se etiquetan como &quot;inactive&quot; y permanecen en la memoria caché en caso de que se vuelvan a utilizar más adelante.</p></li><li><p>De forma predeterminada, las consultas &quot;inactive&quot; se recolectan como basura después de <strong>5 minutos</strong>.</p></li></ul><blockquote><p><em>&quot;Para cambiar esto, puede modificar el <code>gcTime</code> predeterminado para consultas a un valor distinto de <code>1000 * 60 * 5</code> milisegundos.&quot;</em></p></blockquote><ul><li>Las consultas que fallan <strong>se reintentan silenciosamente 3 veces, con un retraso exponencial</strong> antes de capturar y mostrar un error en la interfaz de usuario.</li></ul><blockquote><p><em>&quot;Para cambiar esto, puede modificar las opciones predeterminadas de <code>retry</code> y <code>retryDelay</code> para consultas a algo distinto de <code>3</code> y la función de retroceso exponencial predeterminada.&quot;</em></p></blockquote><ul><li>Los resultados de la consulta de forma predeterminada se <strong>comparten estructuralmente para detectar si los datos realmente han cambiado</strong> y, de lo contrario, <strong>la referencia de los datos permanece sin cambios</strong> para ayudar mejor con la estabilización del valor con respecto a useMemo y useCallback. Si este concepto te suena extraño, ¡no te preocupes! El 99,9% de las veces no necesitarás desactivar esto y hará que tu aplicación tenga más rendimiento sin costo alguno para ti.</li></ul><blockquote><p><em>&quot;El uso compartido estructural solo funciona con valores compatibles con JSON; cualquier otro tipo de valor siempre se considerará modificado. Si observa problemas de rendimiento debido a respuestas grandes, por ejemplo, puede desactivar esta función con el indicador <code>config.structuralSharing</code>. Si está tratando con valores no compatibles con JSON en las respuestas de su consulta y aún desea detectar si los datos han cambiado o no, puede proporcionar su propia función personalizada como <code>config.structuralSharing</code> para calcular un valor a partir de las respuestas antiguas y nuevas, conservando las referencias. según sea necesario.&quot;</em></p></blockquote>',13),r=[n];function c(i,l,u,d,p,m){return o(),a("div",null,r)}const v=e(s,[["render",c]]);export{g as __pageData,v as default};
